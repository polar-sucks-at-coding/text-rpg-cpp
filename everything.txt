#include <pthread.h>
#include <string>
#include <unistd.h>
#include "character.h"

Character::Character(Type type) : Character(type, Inanimate)
{
    this->type = type;
    this->assignPronouns();
    //this->assignBaseStats();
}

Character::Character(Type type, Gender gender)
{
    this->type = type;
    this->gender = gender;
    this->assignPronouns();
}

void Character::assignPronouns()
{
    if (this->gender == Male)
    {
        this->pronoun1 = "he";
        this->pronoun2 = "him";
        this->pronoun3 = "his";
    }
    else if (this->gender == Female)
    {
        this->pronoun1 = "she";
        this->pronoun2 = "her";
        this->pronoun3 = pronoun2;
    }
    else if (this->gender == Neutral)
    {
        this->pronoun1 = "they";
        this->pronoun2 = "them";
        this->pronoun3 = "their";
    }
    else 
    {
        this->pronoun1 = "it";
        this->pronoun2 = pronoun1;
        this->pronoun3 = "its";
    }
}

/*void Character::reportStats()
{

}

void Character::assignBaseStats()
{

}
*/#include <pthread.h>
#include <unistd.h>
#include "character.h"
#include "menu.h"
#include "utility.h"

Character* main_character;

int createMenu(MenuType type)
{
Menu* menu = new Menu(type);
return menu->exit_value;
}

void createNewGame()
{
    Gender player_gender;
    int gender_picker_output;
    switch (createMenu(CharacterCreator))
    {
        default: Utility::invalidInput();
        case 1: gender_picker_output = createMenu(GenderPicker); break;
        case 2: 
        switch (gender_picker_output)
        {
            case 1: {player_gender = Male;} break;
            case 2: {player_gender = Female;} break;
            case 3: {player_gender = Neutral;} break;
        }
        break;
    }
    main_character = new Character(Player, player_gender);
}

int main()
{
    Utility::clearHistory();
    bool fuck = 1;
    while (fuck)
    {
        switch (createMenu(Main))
        {
            case 1: createNewGame(); fuck = 0; break;
            
            default: Utility::notImplemented(); break;
        }
    }    

    //This is where code to start the game will go when said code actually exists.

    
    return 0;
}
#include <pthread.h>
#include <string>
#include <iostream>
#include <unistd.h>
#include "character.h"
#include "option.h"
#include "utility.h"
#include "menu.h"

Menu::Menu(MenuType type)
{
    /*Menu Template
        Title
    Subtext
    (Options)
    */

    switch (type)
    {
        case Main: assignVariables(3, "Main Menu"); break;
        case CharacterCreator: assignVariables(1 +1, "Character Creator", "Pick what you want to decide about your character."); break;
        case GenderPicker: assignVariables(3 +1, "Gender Picker", "Pretty self-explanatory"); break;
    }
    /*If amount_of_options has a +1 or +2, that is for the reset and/or finish options.*/

    if (this->title != "")
    {
        this->typeMenuTitle();
    }
    if (this->subtext != "")
    {
        this->typeMenuSubtext();
    }
    this->createOptions(type);

    this->exit_value = Utility::getPlayerChoice(this->amount_of_options);
    
}

void Menu::assignVariables(int amount_of_options, std::string title, std::string subtext)
{
    this->amount_of_options = amount_of_options;
    this->title = title;
    this->subtext = subtext;

}

void Menu::createOptions(MenuType type)
{
    for (int i = 1; i < this->amount_of_options + 1; i++)
    {
        Option* option = new Option(type, i, this->amount_of_options);
        option->typeOption(i);
    }  
}

void Menu::typeMenuTitle()
{

    std::cout << "      ";
    Utility::typeText(this->title);
    Utility::makeSpace();
}

void Menu::typeMenuSubtext()
{
    Utility::typeText(this->subtext);
    Utility::doubleSpace();
}

#include <pthread.h>
#include <string>
#include <iostream>
#include <unistd.h>
#include "option.h"
#include "menu.h"
#include "utility.h"

Option::Option(MenuType menu_type, int option_number, int max_option_amount)
{
    switch (menu_type) 
    {

        case GenderPicker:
            switch (option_number) 
            {
                case 1: assignText("Male (he/him/his)"); break;
                case 2: assignText("Female (she/her)"); break;
                case 3: assignText("Neutral (they/them/their)"); break;
                case 4: assignText("Finish"); break;
            }
        break;
        case CharacterCreator:
            switch (option_number)
            {
                case 1: assignText("Gender"); break;
                case 2: assignText("Start the game"); break;
            }
        break;
        case Main:
             switch (option_number)
             {
                case 1: assignText("New Game"); break;
                case 2: assignText("Load Game"); break;
                case 3: assignText("Settings"); break;
                default: assignText("Invalid Option"); break;
             }
        break;
    }
};

void Option::assignText(std::string text_param)
{
    this->text = text_param;
}

void Option::typeNumber(int option_number)
{
    std::cout << option_number;
}

void Option::typeOption(int option_number)
{
    typeNumber(option_number);
    Utility::typeText(") ", 0);
    Utility::typeText(this->text);
}

#include <ostream>
#include <pthread.h>
#include <string>
#include <iostream>
#include <unistd.h>
#include <thread>
#include "utility.h"
#include "setting.h"

void Utility::invalidInput()
{
    Utility::typeText("Are you sure you entered right?");
}

uint Utility::getPlayerChoice(int amount_of_options, bool clear_history)
{
    int skibidi;
    std::cin >> skibidi;
    if (clear_history == 1)
    {
        Utility::clearHistory();
    }
    while (1)
    {
        if (skibidi > 0 && skibidi <= amount_of_options)
        {
            return skibidi;
        }
        else
        {
            Utility::typeText("Not a valid option.");
        }
    }
    
    
}

uint Utility::slider(uint min_value, uint max_value)
{
while (1)
{
typeText("Assign a number ", 0);
typeText(std::to_string(min_value), 0);
typeText(" through ", 0);
typeText(std::to_string(max_value), 0);
typeText(" for this value.", 0);
Utility::makeSpace();

uint value;

std::cin >> value;

if (min_value <= value && value <= max_value)
{
    return value;
    break;
}

else  
{
    Utility::typeText("The value you entered isn't within the available range.");
}
}

}

void Utility::typeText(std::string text, bool make_space, int speed)
{
for (std::size_t i = 0; i < text.size(); i++)
{
std::cout << text[i] << std::flush;

std::this_thread::sleep_for(std::chrono::milliseconds(speed));
}
if (make_space == 1)
{
Utility::makeSpace();
}

}

void Utility::makeSpace()
{
std::cout << "\n";
}

void Utility::doubleSpace()
{
std::cout << "\n\n";
}

void Utility::notImplemented()
{
    typeText("This isn't implemented yet.");
}

void Utility::clearHistory()
{
#ifdef __linux__
system("clear");

#elif defined(_WIN32)
system("cls");
#endif
}
#ifndef CHARACTER_H
#define CHARACTER_H
#include <string>

typedef unsigned int uint;

static uint amount_of_stats = 6;

enum Gender
{
    Male,
    Female,
    Neutral,
    Inanimate
};

enum Type
{
    Player,
    Enemy,
    NPC //etc
};

class Character
{
public: 
std::string type;
Gender gender;
uint HP;
uint maxHP;
std::string name;
std::string pronoun1;
std::string pronoun2;
std::string pronoun3;

public:
Character(Type type);
Character(Type type, Gender gender);
void assignPronouns();
/*
void assignBaseStats();
void reportStats();
*/

};

#endif#ifndef MENU_H
#define MENU_H
#include <string>

typedef unsigned int uint;

enum MenuType
{
    Main,
    CharacterCreator,
    GenderPicker,
    Settings

};


class Menu
{
uint amount_of_options;
std::string title = "";
std::string subtext = "";
void typeMenuSubtext();
void typeMenuTitle();
void createOptions(MenuType type);
void assignVariables(int amount_of_options = 0, std::string title = "", std::string subtext = "");
public:
Menu(MenuType type);
uint exit_value;
};

#endif#ifndef CHOICE_H
#define CHOICE_H
#include "menu.h"
#include <string>

typedef unsigned int uint;

class Option
{
    std::string text;
    void assignText(std::string text_param);
    void caseAssignText(int option_number, std::string text_param);
    public:
    void typeNumber(int option_number);
    void typeOption(int option_number);
    Option(MenuType menu_type, int option_number, int max_option_amount);

};

#endif#ifndef SETTING_H
#define SETTING_H

typedef unsigned int uint;

namespace Setting
{
    inline uint typing_speed = 50;
};


#endif#ifndef UTLITY_H
#define UTLITY_H
#include <string>
#include "setting.h"

typedef unsigned int uint;

namespace Utility
{
void makeSpace();
void doubleSpace();
void notImplemented();
void clearHistory();
uint slider(uint min_value, uint max_value);
void typeText(std::string text, bool make_space = 1, int speed = Setting::typing_speed);
uint getPlayerChoice(int amount_of_options, bool clear_history = 0);
void invalidInput();
};

#endif