#ifndef CHARACTER_H
#define CHARACTER_H
#include <string>

typedef unsigned int uint;

static uint amount_of_stats = 6;

enum Gender
{
    Male,
    Female,
    Neutral,
    Inanimate
};

enum Type
{
    Player,
    Enemy,
    NPC //etc
};

class Character
{
public: 
std::string type;
Gender gender;
uint HP;
uint maxHP;
std::string name;
std::string pronoun1;
std::string pronoun2;
std::string pronoun3;

public:
Character(Type type);
Character(Type type, Gender gender);
void assignPronouns();
/*
void assignBaseStats();
void reportStats();
*/

};

#endif#ifndef MENU_H
#define MENU_H
#include <string>

typedef unsigned int uint;

enum MenuType
{
    Main,
    CharacterCreator,
    GenderPicker,
    Settings

};


class Menu
{
uint amount_of_options;
std::string title = "";
std::string subtext = "";
void typeMenuSubtext();
void typeMenuTitle();
void createOptions(MenuType type);
void assignVariables(int amount_of_options = 0, std::string title = "", std::string subtext = "");
public:
Menu(MenuType type);
uint exit_value;
};

#endif#ifndef CHOICE_H
#define CHOICE_H
#include "menu.h"
#include <string>

typedef unsigned int uint;

class Option
{
    std::string text;
    void assignText(std::string text_param);
    void caseAssignText(int option_number, std::string text_param);
    public:
    void typeNumber(int option_number);
    void typeOption(int option_number);
    Option(MenuType menu_type, int option_number, int max_option_amount);

};

#endif#ifndef SETTING_H
#define SETTING_H

typedef unsigned int uint;

namespace Setting
{
    inline uint typing_speed = 50;
};


#endif#ifndef UTLITY_H
#define UTLITY_H
#include <string>
#include "setting.h"

typedef unsigned int uint;

namespace Utility
{
void makeSpace();
void doubleSpace();
void notImplemented();
void clearHistory();
uint slider(uint min_value, uint max_value);
void typeText(std::string text, bool make_space = 1, int speed = Setting::typing_speed);
uint getPlayerChoice(int amount_of_options, bool clear_history = 0);
void invalidInput();
};

#endif